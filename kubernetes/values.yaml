global:
  appName: "streamhouse"
  namespaces:
    system: "streamhouse-system"
    data: "streamhouse-data"
    monitoring: "streamhouse-monitoring"
  networkPolicy:
    enabled: true

minio:
  enabled: true

kafka:
  enabled: true
  image:
    repository: "confluentinc/cp-kafka"
    tag: "7.6.6"
    pullPolicy: IfNotPresent
  replicas: 2
  persistence:
    enabled: true
    size: 5Gi
    storageClass: standard
  service:
    type: ClusterIP
    ports:
      broker: 9092
      controller: 9093
  resources:
    requests:
      memory: 512Mi
      cpu: 300m
    limits:
      memory: 1Gi
      cpu: 600m
  config:
    clusterId: V9QT8q2XR1aMR_udoY14hw
    numPartitions: 3
    replicationFactor: 3
    minInSyncReplicas: 2

flink:
  image:
    repository: phamviethoa2416/flink-realtime-lakehouse
    tag: "v1.0.0"
    pullPolicy: IfNotPresent

  persistence:
    enabled: true
    checkpoints:
      size: 5Gi
      storageClass: standard
      mountPath: /flink-checkpoints
    savepoints:
      size: 5Gi
      storageClass: standard
      mountPath: /flink-savepoints
  jobmanager:
    replicas: 1
    resources:
      requests:
        memory: 1Gi
        cpu: 500m
      limits:
        memory: 2Gi
        cpu: 1000m
    service:
      type: LoadBalancer
      ports:
        rpc: 6123
        blob: 6124
        query: 6125
        web: 8081
    config:
      heapSize: 1.5g
      high-availability: kubernetes
      high-availability.storageDir: file:///flink-checkpoints/ha
      high-availability.cluster-id: flink-realtime-lakehouse
    nodeSelector: { }
    tolerations: [ ]
    affinity: { }

  taskmanager:
    replicas: 2
    resources:
      requests:
        memory: 2Gi
        cpu: 1
      limits:
        memory: 4Gi
        cpu: 2
    config:
      heapSize: 2g
      numberOfTaskSlots: 4
    nodeSelector: { }
    tolerations: [ ]
    affinity: { }

  sqlClient:
    enabled: true
    replicas: 1
    resources:
      requests:
        memory: 512Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 500m

postgresql:
  enabled: true

starrocks:
  auth:
    enabled: true
    user: starrocks
    password: streamhouse-starrocks

  frontend:
    image:
      repository: starrocks/fe-ubuntu
      tag: "latest"
      pullPolicy: IfNotPresent
    replicas: 2
    resources:
      requests:
        memory: 1Gi
        cpu: 250m
      limits:
        memory: 2Gi
        cpu: 500m
    persistence:
      enabled: true
      size: 5Gi
      storageClass: standard
    service:
      type: ClusterIP
      ports:
        http: 8030
        query: 9030
        rpc: 9020

  backend:
    image:
      repository: starrocks/be-ubuntu
      tag: "latest"
      pullPolicy: IfNotPresent
    replicas: 2
    resources:
      requests:
        memory: 2Gi
        cpu: 500m
      limits:
        memory: 4Gi
        cpu: 1000m
    persistence:
      enabled: true
      size: 15Gi
      storageClass: standard
    service:
      type: ClusterIP
      ports:
        http: 8060
        rpc: 8040
        heartbeat: 9050
  probe:
    readiness:
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    liveness:
      initialDelaySeconds: 300
      periodSeconds: 10
      timeoutSeconds: 10
      failureThreshold: 3

  bootstrap:
    enabled: true
    waitInterval: 10
    maxAttempts: 60

trino:
  enabled: true

prometheus:
  image:
    repository: prom/prometheus
    tag: "v2.51.0"
    pullPolicy: IfNotPresent
  replicas: 1
  persistence:
    enabled: true
    size: 10Gi
    storageClass: standard
    accessModes:
      - ReadWriteOnce
  service:
    type: ClusterIP
    port: 9090
    targetPort: 9090
  resources:
    requests:
      memory: 1Gi
      cpu: 500m
    limits:
      memory: 2Gi
      cpu: 1000m
  retention:
    time: 15d