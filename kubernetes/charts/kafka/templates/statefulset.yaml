apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: {{ .Values.global.namespaces.system }}
  labels:
    app: kafka
spec:
  serviceName: kafka-headless
  replicas: {{ .Values.kafka.replicas }}
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
        runAsGroup: 1000
      nodeSelector:
        kubernetes.io/hostname: streamhouse
      containers:
        - name: kafka
          image: {{ .Values.kafka.image.repository }}:{{ .Values.kafka.image.tag }}
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          imagePullPolicy: {{ .Values.kafka.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.kafka.service.ports.broker }}
              name: broker
            - containerPort: {{ .Values.kafka.service.ports.controller }}
              name: controller
          command: [ "sh", "-c" ]
          args:
            - |
              export KAFKA_NODE_ID=$(hostname | awk -F'-' '{print $NF}');
              exec /etc/confluent/docker/run
          resources: {{ toYaml .Values.kafka.resources | nindent 12 }}
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CLUSTER_ID
              value: {{ .Values.kafka.config.clusterId | quote }}
            - name: KAFKA_PROCESS_ROLES
              value: "broker,controller"
            - name: KAFKA_NODE_ID
              value: "$(MY_POD_NAME##*-)"
            - name: KAFKA_CONTROLLER_QUORUM_VOTERS
              value: "0@kafka-0.kafka-headless.{{ .Values.global.namespaces.system }}.svc.cluster.local:9093,1@kafka-1.kafka-headless.{{ .Values.global.namespaces.system }}.svc.cluster.local:9093,2@kafka-2.kafka-headless.{{ .Values.global.namespaces.system }}.svc.cluster.local:9093"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://:9092,CONTROLLER://:9093"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://$(MY_POD_NAME).kafka-headless.{{ .Values.global.namespaces.system }}.svc.cluster.local:9092"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
            - name: KAFKA_CONTROLLER_LISTENER_NAMES
              value: "CONTROLLER"
            - name: KAFKA_NUM_PARTITIONS
              value: {{ .Values.kafka.config.numPartitions | quote }}
            - name: KAFKA_DEFAULT_REPLICATION_FACTOR
              value: {{ .Values.kafka.config.replicationFactor | quote }}
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: {{ .Values.kafka.config.replicationFactor | quote }}
            - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: {{ .Values.kafka.config.replicationFactor | quote }}
            - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
              value: {{ .Values.kafka.config.minInSyncReplicas | quote }}
            - name: KAFKA_MIN_IN_SYNC_REPLICAS
              value: {{ .Values.kafka.config.minInSyncReplicas | quote }}
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
          volumeMounts:
            - name: kafka-data
              mountPath: /var/lib/kafka/data
  volumeClaimTemplates:
    - metadata:
        name: kafka-data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: {{ .Values.kafka.persistence.storageClass }}
        resources:
          requests:
            storage: 5Gi